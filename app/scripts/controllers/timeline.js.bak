'use strict';

angular.module('darwinD3App')
  .controller('TimelineCtrl', function ($scope, Fixtures, Layout, Data) {
    Data.getData().then(function (result) {
      $scope.uniqueDates = _.uniq(_.pluck(result.data, 'period')).reverse();

      $scope.startDate = '2013-09-23';
      $scope.endDate = '2013-09-30';

      $scope.visibleNetworks = ['facebook', 'twitter'];

      $scope.selectedMetric = 'advocacy';

      $scope.dataset = Data.getPeriodData(result.data, $scope.startDate, $scope.endDate, ['facebook', 'twitter'], 'advocacy');

      var parseDate = d3.time.format("%Y-%m-%d").parse;

      var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width = 800 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

      var seriesNames = d3.keys($scope.dataset[0])
        .filter(function (d) {
          return d !== 'period';
        });

      var dataSeries = seriesNames.map(function (series) {
        return $scope.dataset.map(function (d) {
          return {
            x: d.period,
            y: d[series]
          }
        })
      });

      for (var i = 0; i < dataSeries.length; i++) {
        var serie = dataSeries[i];
        for (var j = 0; j < serie.length; j++) {
          var entry = serie[j];
          entry.x = parseDate(entry.x);
        }
      }

      var x = d3.time.scale()
        .range([0, width]);

      var y = d3.scale.linear()
        .range([height, 0]);

      x.domain(d3.extent(d3.merge(dataSeries), function (d) {
        return d.x;
      })).nice();
      y.domain(d3.extent(d3.merge(dataSeries), function (d) {
        return d.y;
      })).nice();

      var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

      var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left");

      var line = d3.svg.line()
        .x(function (d) {
          return x(d.x);
        })
        .y(function (d) {
          return y(d.y);
        });

      // Add SVG container with padding
      var svg = d3.select('#graph-timeline').append('svg')
        .attr({
          width: width + margin.left + margin.right,
          height: height + margin.top + margin.bottom
        })
        .append('g')
        .attr({
          transform: 'translate(' + margin.left + ',' + margin.top + ')'
        });

      // Add X axis
      svg.append('g')
        .attr({
          'class': 'x axis',
          transform: 'translate(0,' + height + ')'
        })
        .call(xAxis);

      // Add Y axis
      svg.append('g')
        .attr({
          'class': 'y axis'
        })
        .call(yAxis)
        .append('text')
        .attr({
          transform: 'rotate(-90)',
          y: 6,
          dy: '.71em'
        })
        .style('text-anchor', 'end')
        .text('Advocacy');

      // Add groups for each data source
      var series = svg.selectAll('.series')
        .data(dataSeries)
        .enter().append('g')
        .attr('class', function (d, i) {
          return 'series ' + Data.keyToSource[++i];
        });

      // Add paths

      series.append('path')
        .attr('class', 'line')
        .attr('d', line);
    });
  });
